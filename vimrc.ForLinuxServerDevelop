" File: .vimrc
" Author: AntonyBonn
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               General Setting                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

if filereadable("/etc/vim/vimrc.local") "载入全局设定
  source /etc/vim/vimrc.local
endif
set nocompatible "设置不完全兼容vi
source $VIMRUNTIME/vimrc_example.vim
set nu! "显示行号
set encoding=utf-8 "编码设定
set langmenu=zh_CN.UTF-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
if has("syntax") "语法高亮 (Vim5之后的版本支持高亮)
  syntax on
endif
colorscheme desert "设置主题色
"colorscheme solarized
"colorscheme molokai
"colorscheme phd
set history=500 "设置命令历史行数 
filetype on                      " 侦测文件类型  
filetype indent on               " 针对不同的文件类型采用不同的缩进格式  
filetype plugin on               " 针对不同的文件类型加载对应的插件  
filetype plugin indent on "启用自动补全
set autowrite " 在像:next和:make等命令前自动保存
set showcmd         " 未完成的指令也显示
set scrolloff=3     " 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set showmatch		" 在输入成对的括号时，Vim 会帮助你跳转并高亮一下匹配的括号,然后回到你正在输入的位置
set matchtime=1     "showmatch匹配时间最多100ms
set hlsearch        "高亮显示所有匹配项
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <leader>p "+p
" 定义快捷键关闭当前分割窗口
nmap <leader>q :q<CR>
" 定义快捷键保存当前窗口内容
nmap <leader>w :w<CR>
" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC
set autochdir

""""""""
" 缩进 "
""""""""
"设置Tab代表的字符数
set tabstop=4
"设置自动缩进字符数
set shiftwidth=4
"设置自动缩进
set autoindent
"让 vim 把连续数量的空格视为一个制表符
set softtabstop=4
""""""""""""""""""""""""""""
"  状态行（命令行）的显示  "
""""""""""""""""""""""""""""
set cmdheight=1          " 命令行（在状态行下）的高度，默认为1 
set ruler                " 右下角显示光标位置的状态行  
set laststatus=2         " 开启状态栏信息   
set wildmenu             " 增强模式中的命令行自动完成操作  
""""""""""
"  查找  "
""""""""""
set hlsearch                 " 开启高亮显示结果  
set incsearch                " 开启实时搜索功能  
set smartcase		         " smart matching(当模式中有大写字母时对大小写敏感)
""""""""""""""""""""""""
"       自动匹配       "
""""""""""""""""""""""""
if &filetype == 'c' || &filetype == 'cpp'
	:inoremap < <><ESC>i
"   :inoremap > <c-r>=ClosePair('>')<CR>  
    :inoremap ` ``<ESC>i 
endif
"function ClosePair(char)  
"    if getline('.')[col('.')-1] == a:char  
"        return "\<Right>"
"    else  
"        return a:char
"    endif  
"endf

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            General Map Settings                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 定义快捷键的前缀，即<leader>
" let mapleader="\"
"""""""""
"  Map  "
"""""""""
"Ctrl+a小写转大写
inoremap <C-u> <esc>gUiwea
"<F11>新建tab
map <F11> :tabnew <CR>
"<F12>关闭标签
map <F12> :close <CR>
"Ctrl+s保存
map <C-s> :w <CR>
"Ctrl+a全选
map <C-a> ggv <S-g>
"分屏移动
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
"上下左右
inoremap <A-j> <Down>
inoremap <A-k> <Up>
inoremap <A-l> <Right>
inoremap <A-h> <Left>
"退出:ESC!
inoremap jk <Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               For the VUNDLE                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible              " 去除VI一致性,必须
filetype off                  " 必须

if has("win32") || has("win64")
    "Vundle的路径
    set rtp+=$VIM/vimfiles/bundle/Vundle.vim
    "插件的安装路径
    call vundle#begin('$VIM/vimfiles/bundle/')
else
    " 设置包括vundle和初始化相关的runtime path
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " 另一种选择, 指定一个vundle安装插件的路径
    "call vundle#begin('~/some/path/here')
endif

" 让vundle管理插件版本,必须
Plugin 'VundleVim/Vundle.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Own Plugins                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""
"  格式  "
""""""""""
"Python 自动缩进
Plugin 'vim-scripts/indentpython.vim'
"每次保存文件时Vim都会检查代码的语法
Plugin 'scrooloose/syntastic'
"按照pep8标准自动格式化<F8>
Plugin 'tell-k/vim-autopep8'
""""""""""
"  文件  "
""""""""""
"集成git,在原本命令前面加上G
Plugin 'tpope/vim-fugitive'
"Poweline增强版
Plugin 'vim-airline/vim-airline'
"文件树形结构浏览
Plugin 'scrooloose/nerdtree'
"多文件共享nerdtree
Plugin 'jistr/vim-nerdtree-tabs'
"nerdtree显示git状态插件
Plugin 'Xuyuanp/nerdtree-git-plugin'

"""""""""""""
"  自动补全  "
"""""""""""""
Plugin 'zxqfl/tabnine-vim'

""""""""""
"  查找  "
""""""""""
"Ctrl+P搜索任何文件
Plugin 'kien/ctrlp.vim'
"列出当前文件中的所有宏, 全局变量, 函数名等
Plugin 'vim-scripts/taglist.vim'
"比taglist更适合c++使用，函数能够按类区分，支持按类折叠显示等
Plugin 'majutsushi/tagbar'

""""""""""
""""""""""""""
"  主题风格  "
""""""""""""""
"素雅 solarized（https://github.com/altercation/vim-colors-solarized ）
Plugin 'altercation/vim-colors-solarized'
"多彩 molokai（https://github.com/tomasr/molokai ）
Plugin 'tomasr/molokai'
"复古 phd（http://www.vim.org/scripts/script.php?script_id=3139 ）
Plugin 'vim-scripts/phd'
"C++语法高亮
Plugin 'octol/vim-cpp-enhanced-highlight'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 你的所有插件需要在下面这行之前
call vundle#end()            " 必须
filetype plugin indent on    " 必须 加载vim自带和插件相应的语法和文件类型相关脚本
"
" 简要帮助文档
" :PluginList       - 列出所有已配置的插件
" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate
" :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存
" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件
"
" 查阅 :h vundle 获取更多细节和wiki以及FAQ
" 将你自己对非插件片段放在这行之后


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 syntastic配置                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:syntastic_error_symbol = ">!"
let g:syntastic_warning_symbol = ">>"

let g:syntastic_check_on_open=1 " 载入时检查错误
let g:syntastic_check_on_wq=1 " 保存时检查错误
let g:syntastic_enable_highlighting=1
let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 1 " 自动载入错误到 the location list
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <leader>s :call ToggleErrors()<cr>
" nnoremap <leader>sn :lnext<cr>
" nnoremap <leader>sp :lprevious<cr>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 nerdtree配置                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 显示行号
let NERDTreeShowLineNumbers=1
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
let NERDTreeWinSize=30
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 显示书签列表
let NERDTreeShowBookmarks=1

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 NERDTree配置                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"F2开启和关闭树
map <F2> :NERDTreeToggle<CR>
let NERDTreeChDirMode=1
let NERDChristmasTree=1
"显示书签
let NERDTreeShowBookmarks=1
"设置忽略文件类型
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
"窗口大小
let NERDTreeWinSize=32
"窗口位置
let NERDTreeWinPos="right"
"确定是否改变Vim的CWD
let NERDTreeChDirMode=1


